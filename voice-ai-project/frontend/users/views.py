from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.forms import AuthenticationForm
from .forms import CustomUserCreationForm
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST

def register(request):
    if request.method == "POST":
        form = CustomUserCreationForm(request.POST, request.FILES)
        if form.is_valid():
            user = form.save()
            login(request, user)

            # üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
            invite_code = request.session.pop("pending_invite", None)
            if invite_code:
                return redirect(f"/join-room/{invite_code}/")  # ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

            return redirect("voice_chat:home")  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥
    else:
        form = CustomUserCreationForm()
    return render(request, "users/register.html", {"form": form})

def user_login(request):
    if request.method == "POST":
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)

            # üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏°
            invite_code = request.session.pop("pending_invite", None)
            if invite_code:
                return redirect(f"/join-room/{invite_code}/")  # ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

            return redirect("voice_chat:home")  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥
    else:
        form = AuthenticationForm()
    return render(request, "users/login.html", {"form": form})

def user_logout(request):
    logout(request)
    return redirect("login")  # ‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login

# ‡πÉ‡∏ô users/views.py
@login_required
@require_POST
def update_profile_api(request):
    user = request.user
    
    # ‡πÉ‡∏ä‡πâ Django Form ‡∏à‡∏∞‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ validation
    # ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á:
    new_display_name = request.POST.get('display_name', '').strip()
    # new_username = request.POST.get('username', user.username).strip() # ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç username

    form_errors = {} # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö error

    if not new_display_name:
        form_errors['display_name'] = ['‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á'] # Django form errors ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô list
    
    # (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô username ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ validate
    # if new_username:
    #     if new_username != user.username:
    #         if CustomUser.objects.filter(username=new_username).exclude(pk=user.pk).exists():
    #             form_errors['username'] = ['Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß']
    #         else:
    #             user.username = new_username
    # else:
    #     form_errors['username'] = ['Username ‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á']


    if form_errors: # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ validate ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á
        return JsonResponse({'error': form_errors}, status=400)

    user.display_name = new_display_name
    
    if 'profile_image' in request.FILES:
        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        # if user.profile_image and user.profile_image.name != default_profile_image():
        #     user.profile_image.delete(save=False)
        user.profile_image = request.FILES['profile_image']
    
    try:
        user.save() # method save ‡∏Ç‡∏≠‡∏á CustomUser ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤ override ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á display_name = username ‡∏ñ‡πâ‡∏≤ display_name ‡∏ß‡πà‡∏≤‡∏á (‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
        updated_user_data = {
            'username': user.username,
            'display_name': user.get_name_to_display(), # ‡πÉ‡∏ä‡πâ get_name_to_display ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
            'profile_image_url': user.get_profile_image_url()
        }
        return JsonResponse({'message': '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'user': updated_user_data})
    except Exception as e: # ‡πÄ‡∏ä‡πà‡∏ô Database error ‡∏´‡∏£‡∏∑‡∏≠ Model validation error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        return JsonResponse({'error': {'__all__': [str(e)]}}, status=500)
    
@login_required # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ API ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà login ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
def get_current_user_profile_api(request):
    user = request.user # request.user ‡∏Ñ‡∏∑‡∏≠ CustomUser instance ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà

    user_data = {
        'id': user.id,
        'username': user.username,
        'email': user.email,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'display_name': user.get_name_to_display(), # ‡πÉ‡∏ä‡πâ method ‡∏à‡∏≤‡∏Å model ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        'profile_image_url': user.get_profile_image_url() # ‡πÉ‡∏ä‡πâ method ‡∏à‡∏≤‡∏Å model ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    }
    return JsonResponse({'isAuthenticated': True, 'user': user_data})

from django.contrib.auth import update_session_auth_hash, get_user_model
from django.contrib.auth.forms import PasswordChangeForm # ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ
from django.core.exceptions import ValidationError
from django.contrib.auth.password_validation import validate_password # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà

CustomUser = get_user_model() # ‡∏î‡∏∂‡∏á CustomUser model ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà

@login_required
@require_POST # ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ POST request
def change_credentials_api(request):
    user = request.user
    errors = {} # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ field
    changed_fields = [] # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ field ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å FormData ‡∏ó‡∏µ‡πà JavaScript ‡∏™‡πà‡∏á‡∏°‡∏≤
    new_username = request.POST.get('new_username', '').strip()
    current_password = request.POST.get('current_password', '')
    new_password1 = request.POST.get('new_password1', '')
    new_password2 = request.POST.get('new_password2', '')

    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Password ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    if not current_password:
        errors['current_password'] = ['‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Password ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô']
    elif not user.check_password(current_password):
        errors['current_password'] = ['Password ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á']
    
    # ‡∏ñ‡πâ‡∏≤ Password ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏ú‡∏¥‡∏î ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ ‡∏ï‡πà‡∏≠
    if 'current_password' in errors:
        return JsonResponse({'error': errors}, status=400)

    # 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Username (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å new_username)
    if new_username: # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á new_username ‡∏°‡∏≤
        if new_username == user.username:
            # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á username ‡∏à‡∏£‡∏¥‡∏á
            pass 
        elif len(new_username) < 3: # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á validation: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
            errors.setdefault('new_username', []).append('Username ‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
        elif CustomUser.objects.filter(username=new_username).exclude(pk=user.pk).exists():
            errors.setdefault('new_username', []).append('Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô')
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô validation ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            user.username = new_username
            changed_fields.append('username')
            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô username, display_name ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô username ‡πÄ‡∏î‡∏¥‡∏° ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            # ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç display_name ‡πÄ‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô model ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á display_name = username ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)

    # 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Password (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å new_password1)
    if new_password1: # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô password
        if not new_password2:
            errors.setdefault('new_password2', []).append('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Password ‡πÉ‡∏´‡∏°‡πà')
        elif new_password1 != new_password2:
            errors.setdefault('new_password2', []).append('Password ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Password ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô')
        else:
            try:
                # ‡πÉ‡∏ä‡πâ Django built-in password validation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á password
                validate_password(new_password1, user=user)
                user.set_password(new_password1) # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ hash password ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                changed_fields.append('password')
            except ValidationError as e:
                errors.setdefault('new_password1', list(e.messages)) # ‡πÄ‡∏Å‡πá‡∏ö error messages ‡∏à‡∏≤‡∏Å validator
    elif new_password2 and not new_password1: # ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å password ‡πÉ‡∏´‡∏°‡πà
         errors.setdefault('new_password1', []).append('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Password ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢')


    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ validate username ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ password ‡πÉ‡∏´‡∏°‡πà
    if errors:
        return JsonResponse({'error': errors}, status=400)

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏î‡πÜ ‡πÄ‡∏•‡∏¢ (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å username ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å password ‡πÉ‡∏´‡∏°‡πà)
    if not changed_fields:
        # ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏Å current_password ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ ‡∏Å‡πá‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        return JsonResponse({'message': '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á', 'no_changes': True})

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    try:
        user.save() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å field ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡πÄ‡∏ä‡πà‡∏ô username)
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô password ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        if 'password' in changed_fields:
            update_session_auth_hash(request, user)
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        updated_user_data = {
            'username': user.username,
            'display_name': user.get_name_to_display(), 
        }
        return JsonResponse({'message': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Username ‡πÅ‡∏•‡∏∞/‡∏´‡∏£‡∏∑‡∏≠ Password ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'user': updated_user_data})
        
    except Exception as e:
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≠‡∏ô save (‡πÄ‡∏ä‡πà‡∏ô database error)
        return JsonResponse({'error': {'__all__': [str(e)]}}, status=500) # '__all__' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö general form error